#!/usr/bin/env python
# Copyright (c) 2021 VMware, Inc. All Rights Reserved.
# SPDX-License-Identifier: BSD-2 License
# The full license information can be found in LICENSE.txt
# in the root directory of this project.

import collections
import logging
import os
import uuid

from lydian.apps.base import exposify
from lydian.apps.console import Console
from lydian.apps.internal.setup import LydianDB
from lydian.common.background import BackgroundMixin
from lydian.utils.common import get_host_name

from lydian.utils.ssh_host import Host

log = logging.getLogger(__name__)


@exposify
class Lynis(Console, BackgroundMixin):
    NAME = "Lynis"

    LYNIS_PATH = '/tmp/lynis'
    LYNIS_TOOL = 'lynis'
    LYNIS_ARGS = ' audit system -Q'

    def __init__(self):
        Console.__init__(self)
        BackgroundMixin.__init__(self)
        self.requests = collections.defaultdict()
        self.done = set()
        self._run = self.run

    def install(self, runnerip, username, password, filepath):
        """
        Configures environment such as install necessary files etc.
        """
        with Host(runnerip, username, password) as host:
            host.put_file(filepath, '/tmp/lynis.tar.gz')

        self.run_command('tar -xvf /tmp/lynis.tar.gz')

    def is_running(self):
        """
        Tells if app is available.
        """
        return True

    def start_scan(self, reqid=None):
        """
        """
        if reqid in self.requests:
            log.info('Lynis scan for %s is already running', reqid)
            return
        reqid = reqid or '%s' % uuid.uuid4()
        cmnd = '%s %s' % (os.path.join(self.LYNIS_PATH, self.LYNIS_TOOL),
                          self.LYNIS_ARGS)
        p = self._start_subprocess(cmnd)
        self.requests[reqid] = p
        return reqid

    def is_scan_complete(self, reqid):
        if reqid not in self.requests:
            log.info('Lynis - Invalid request %s', reqid)
            return None
        return not self._is_alive(self.requests[reqid])

    def stop_scan(self, reqid):
        if reqid not in self.requests:
            log.info('Lynis - Invalid request %s', reqid)
            return None
        if self._is_alive(self.requests[reqid]):  # Still running
            self._kill_subprocess(self.requests[reqid], True)

    def _save_results_to_db(self, reqid):

        proc = self.requests.get(reqid, None)
        if not proc:
            return

        stdout_val = proc.communicate()[0]
        output = stdout_val.strip().decode('utf-8')
        # TODO parse output here:
        with LydianDB() as db:
            db.table = db.RISKS
            for _ in output.parsed():
                db.write(host=get_host_name(), tool='lynis', reqid=reqid,
                         serverity='HIGH',
                         message='/etc/passwd editable')

    def run(self):
        while not self.stopped:
            for reqid, _ in self.requests.items():
                if self.is_scan_complete(reqid) and reqid not in self.done:
                    try:
                        self._save_results_to_db(reqid)
                    except Exception:
                        log.error("Error in parsing/saving reqults for %s", reqid)
                    finally:
                        self.done.add(reqid)

    def get_result(self, reqid):
        with LydianDB() as db:
            db.table = db.RISKS
            return db.read(reqid=reqid)

LYDIAN (Release Notes)
----------------------

1.0 (Major)
---------------------
- Improved node preparation for Ubuntu based hosts.
- Support for recording ping failure reason in results.
- Podium API to update endpoints info.
- Make interface fecth optional while preparing hosts.
- Minor bug fixes and pep8 fixes in podium.

0.2.0 (Minor)
---------------------
- Adds resiliency in egg generation.
- Allow configuration of log levels for 3rd party modules - paramiko and rpyc
- Improvements in unregister_traffic to reduce stress on DB.

0.1.9 (Minor)
---------------------
Patch release to handle stop_traffic() bug.

0.1.8 (Minor)
---------------------
Release 0.1.7 is bug fix and maintenance release over 0.1.6 release and also a pre-cursor
release for upcoming release (0.1.9). It has pre-release support for
- Vulnerability Scan
- ESX platform.

0.1.7 (Minor)
---------------------
Release 0.1.7 is bug fix and maintenance release over 0.1.6 release and also a pre-cursor
release for upcoming release (0.1.8). Summary of changes is below.

Pre-cursor Features (coming in 0.1.8)
-----------
- Backward compatibility for Python 3.5 and prior.
- Unregister Traffic API to remove traces of traffic request from system.
- Option to Retry on failure on UDP/TCP/HTTP traffics.
- Search query to support epoch timestamp based ranges.
- IPv6 support for HTTP Traffic.

Bug Fixes
-----------
- Fix for database is locked issue.
- prep_host to return status on each node to mark if service up or not.
- Do not enable resource monitoring at primary node by default. It leads to hang if client doesn't call close on podium.
- Persist socket timeout and interval.


0.1.6 (Major)
---------------------
Release 0.1.6 is first major, full feature release of Lydian.
Following are some noteworthy mentions on features.

 - Distributed Systems based Service.
    - Resiliency with the help of persistence at each node and daemon based service.
    - Scalability with carefully designed system. More details in testing section.
 - Lightweight
    - SQLite database used for persistence. SQLite is supported on ESX as well.
    - Most of the source code is native python so that it is easy to support non conventional platforms such as ESX.
    - Only hard dependency on 3rd party modules is on "rpyc" and "sql30" which are native python in itself and have zero further dependency.
    - PS: Wavefront Python client and psutil need to be optionally installed at endpoints respective uses of reporting to wavefront and resource monitoring.
 - Easy Cluster Setup
    - Nodes can be added to cluster anytime.
    - Lydian can be installed on nodes at runtime.
    - New updates can be pushed on nodes automatically.
 - Dynamic Updates
    - Settings can be modified at runtime, without having to restart service.
 - Traffic Generation
    - Standalone Traffic Generation utility.
    - Ability to modify default socket timeout, payload.
 - Data Granularity
    - Every traffic request is uniquely identifiable.
    - Results of each ping associatd with request id. It helps in getting accurate results in near identical requests.
 - Integration with 3rd party tools.
    - Traffic can be generated by 3rd party tools such as fping, iperf.
    - Results, if pushed onto the data queue in pre-defined format, get automatically pushed to monitoring services such as wavefront.
 - Common Interface.
    - All the operations handled through common interface called "podium".
    - Podium has in-built persistence. Sessions (prompts) lost are recoverable to some extent.
 - Ease of use.
    - Configs can be changed / applied from runner a.k.a. primary node itself.
    - Patches can be applied from runner itself.
 - Testing
    - 1 Billion pings on 145 VMs setup in 1 day.
    - 1.2 Billion pings on 3000 VMs setup 5 hours.
    - 1+ Billion pings on 5649 VMs setup 1.5 hours.
    - 1.2 million ping on 2 Pings in 10 days.


0.1.5 (Early access)
---------------------
- Early access release to next major release.


0.1.4 (Early Beta)
-----------------
- Initial POC release with support for :
    - Iperf based traffic generation
    - Packet capture using tcpdump
    - Resource Monitoring
- Basic Traffic Support
    - Handles simple case of traffic generation on TCP / UDP protocols.
- Node preparation
    - Support for generating and consuming egg files through environment variable.
- Requirements
    - Soft
        - psutil should be pre-installed on endpoints for resource monitoring.
    - Hard
        - Wavefront SDK and APIs should be pre-installed on endpoints for capturing results on wavefront.
